{"version":3,"sources":["components/Header.js","components/Card.js","api.js","components/Home.js","components/Details.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Link","to","className","Component","Card","_this","this","onClick","props","getDetails","data","alt","title","src","image_url","loadSchedule","day","Axios","get","days","Home","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectDay","e","currentTarget","value","setState","currentDay","then","res","dataDay","state","getDay","_this2","today","Date","_this3","Fragment","Row","Col","md","Label","ControlLabel","FormControl","componentClass","onChange","keys","map","item","components_Card","key","Details","episodes","characters","getInfo","dataDetails","mal_id","id","loadCharacters","loadEpisodes","synopsis","length","Table","striped","bordered","condensed","hover","name","episode_id","App","Grid","BrowserRouter","components_Header","Route","exact","path","render","components_Home","assign","components_Details","Boolean","window","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d9f4e06.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {\n    render() { \n        return ( \n            <Link to=\"/crunchyroll-competitor\" className=\"link\">\n                <h1 className=\"header\">Crunchyroll Competitor</h1>\n            </Link>  \n         );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Card extends Component {\n    render() { \n        return ( \n            <Link to=\"/crunchyroll-competitor/details\">\n                <figure onClick={ () => this.props.getDetails( this.props.data ) }>\n                    <img alt={this.props.data.title} src={this.props.data.image_url} />\n                </figure>\n            </Link>\n         );\n    }\n}\n \nexport default Card;","import Axios from 'axios';\n\nexport function loadSchedule(day) {\n    return Axios.get('https://api.jikan.moe/v3/schedule/' + day);\n}\n\nexport function loadCharacters(id) {\n    return Axios.get('https://api.jikan.moe/v3/anime/' + id + '/characters_staff');\n}\n\nexport function loadEpisodes(id) {\n    return Axios.get('https://api.jikan.moe/v3/anime/' + id + '/episodes');\n}","import React, { Component } from 'react';\nimport { Row, Col, Label , ControlLabel, FormControl } from 'react-bootstrap';\nimport Card from './Card';\nimport { loadSchedule } from '../api';\n\nconst days = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];\n\nclass Home extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            currentDay: this.getDay(),\n            dataDay: {}\n        };\n    }\n\n    componentDidMount() {\n        loadSchedule(this.state.currentDay)\n            .then(res => {\n                this.setState({\n                    dataDay: res.data[this.state.currentDay]\n                })\n            });\n    }\n\n    getDay() {\n        let date = new Date();\n        let today = date.getDay();\n        return days[today];\n    }\n\n    selectDay = e => {\n        if(e.currentTarget.value !== \"---\"){\n            this.setState({\n                currentDay: e.currentTarget.value\n            })\n            loadSchedule(e.currentTarget.value)\n                .then(res => {\n                    this.setState({\n                        dataDay: res.data[this.state.currentDay]\n                    })\n                })\n        }\n    }\n\n    render() { \n        return ( \n            <React.Fragment>\n                <Row className=\"show-grid\">\n                    <Col md={8}>\n                        <h2>Showing schedule of <Label className=\"label-day\">{this.state.currentDay}</Label></h2>\n                    </Col>\n                    <Col md={4}>\n                        <ControlLabel>Select other day</ControlLabel>\n                        <FormControl componentClass=\"select\" onChange={this.selectDay}>\n                            <option value=\"---\">---</option>\n                            <option value=\"monday\">Monday</option>\n                            <option value=\"tuesday\">Tuesday</option>\n                            <option value=\"wednesday\">Wednesday</option>\n                            <option value=\"thursday\">Thursday</option>\n                            <option value=\"friday\">Friday</option>\n                            <option value=\"saturday\">Saturday</option>\n                            <option value=\"sunday\">Sunday</option>\n                        </FormControl>\n                    </Col>\n                </Row>\n                <Row className=\"show-grid\">\n                    <Col md={12}>\n                        <div className=\"columns\">   \n                            {Object.keys(this.state.dataDay).map( item =>\n                                <Card key={item} data={this.state.dataDay[item]} getDetails={this.props.getDetails} />\n                                )}\n                        </div>\n                    </Col>\n                </Row>\n            </React.Fragment>\n         );\n    }\n}\n \nexport default Home;","import React, { Component } from 'react';\nimport { Row, Col, Table } from 'react-bootstrap';\nimport { loadCharacters, loadEpisodes } from '../api';\n\nclass Details extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            episodes: {},\n            characters: {}\n        };\n    }\n\n    componentDidMount() {\n        this.getInfo(this.props.dataDetails.mal_id);\n    }\n\n    getInfo(id) {\n        loadCharacters(id)\n            .then(res=>{\n                this.setState({\n                    characters: res.data.characters\n                })\n            });\n        loadEpisodes(id)\n            .then(res=>{\n                this.setState({\n                    episodes: res.data.episodes                \n                })\n            });\n    }\n\n    render() { \n        return ( \n            <React.Fragment>\n                <Row className=\"show-grid details\">\n                    <Col md={12}>\n                        <h2>{this.props.dataDetails.title}</h2>\n                    </Col>\n                </Row>\n                <Row className=\"show-grid details\">\n                    <Col md={4} className=\"img-cntr\">\n                        <img alt={this.props.dataDetails.title} src={this.props.dataDetails.image_url} />\n                    </Col>\n                    <Col md={8}>\n                        <h3>Synopsis</h3>\n                        <p>{this.props.dataDetails.synopsis}</p>\n                    </Col>\n                </Row>\n                <Row className=\"show-grid details\">\n                    <Col md={12}>\n                        <h3>Characters</h3>\n                        { this.state.characters.length > 0 ? (\n                            <div className=\"characters-list\">\n                            <Table striped bordered condensed hover>\n                            <thead>\n                                <tr>\n                                <th>Picture</th>\n                                <th>Name</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {Object.keys(this.state.characters).map( item =>\n                                    <tr key={item}>\n                                        <td>\n                                            <img className=\"thumbs\" alt={this.state.characters[item].name} src={this.state.characters[item].image_url} />\n                                        </td>\n                                        <td>{this.state.characters[item].name}</td>\n                                    </tr>\n                                    )}\n                            </tbody>\n                            </Table>\n                        </div>\n                        ) : (\n                            <p>No information about characters yet.</p>\n                        ) }                      \n                    </Col>\n                </Row>\n                <Row className=\"show-grid details\">\n                    <Col md={12}>\n                    <h3>Episodes</h3>\n                        { this.state.episodes.length > 0 ? (\n                            <div className=\"episodes-list\">\n                            <Table striped bordered condensed hover>\n                            <thead>\n                                <tr>\n                                <th>#</th>\n                                <th>Title</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {Object.keys(this.state.episodes).map( item =>\n                                    <tr key={item}>\n                                        <td>{this.state.episodes[item].episode_id}</td>\n                                        <td>{this.state.episodes[item].title}</td>\n                                    </tr>\n                                    )}\n                            </tbody>\n                            </Table>\n                        </div> \n                        ) : ( \n                            <p>No information about episodes yet.</p>\n                        ) }\n                    </Col>\n                </Row>\n            </React.Fragment>\n         );\n    }\n}\n \nexport default Details;","import React, { Component } from 'react';\nimport { Grid } from 'react-bootstrap';\nimport Header from './Header';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Details from './Details';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      dataDetails: {}\n    };\n  }\n\n  getDetails = data => {\n    this.setState({\n      dataDetails: data\n    })\n  }\n\n  render() {\n    return (\n      <Grid> \n        <Router>\n          <React.Fragment>\n            <Header />\n            <Route exact path=\"/crunchyroll-competitor\" render={(props) => <Home {...props} getDetails={this.getDetails} />}/>\n            <Route path=\"/crunchyroll-competitor/details\" render={(props) => <Details {...props} dataDetails={this.state.dataDetails} />}/>\n          </React.Fragment>\n        </Router>\n      </Grid>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}